# Comprehensive Test Automation Pipeline
# Runs unit tests, integration tests, E2E tests, and visual regression tests

name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '18.x'
  PLAYWRIGHT_BROWSERS_PATH: ~/.cache/playwright

jobs:
  # Job 1: Unit and Integration Tests
  unit-integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test:unit
        env:
          CI: true
          NODE_ENV: test
          
      - name: Run integration tests
        run: npm run test:integration
        env:
          CI: true
          NODE_ENV: test
          TEST_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          TEST_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
          
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-integration
          fail_ci_if_error: false
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
            
  # Job 2: End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps
        
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ matrix.browser }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ matrix.browser }}-
            
      - name: Build application
        run: npm run build
        
      - name: Start application server
        run: npm run dev &
        env:
          PORT: 3000
          
      - name: Wait for server to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_WORKERS: 1
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            
  # Job 3: Visual Regression Tests
  visual-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install chromium --with-deps
        
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-visual-${{ hashFiles('package-lock.json') }}
          
      - name: Build application
        run: npm run build
        
      - name: Start application server
        run: npm run dev &
        env:
          PORT: 3000
          
      - name: Wait for server
        run: npx wait-on http://localhost:3000 --timeout 60000
        
      - name: Run visual regression tests
        run: npm run test:visual
        env:
          CI: true
          
      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: |
            test-results/visual-*
            tests/visual/**/*-actual.png
            tests/visual/**/*-diff.png
            
  # Job 4: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance tests
        run: npm run test:performance
        env:
          CI: true
          NODE_ENV: test
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: test-results/performance-*
          
  # Job 5: Security and Quality Checks
  security-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check for outdated packages
        run: npm outdated || true
        
      - name: Run TypeScript checks (if applicable)
        run: npx tsc --noEmit || true
        continue-on-error: true
        
      - name: Build application
        run: npm run build
        
      - name: Check bundle size
        run: |
          echo "Bundle sizes:"
          ls -lh dist/
          
  # Job 6: Test Summary and Reporting
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, visual-tests, performance-tests, security-quality]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        
      - name: Generate test summary report
        run: |
          echo "## Test Summary Report" >> test-summary.md
          echo "### Test Status" >> test-summary.md
          echo "- Unit/Integration Tests: ${{ needs.unit-integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Visual Tests: ${{ needs.visual-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- Security/Quality: ${{ needs.security-quality.result }}" >> test-summary.md
          echo "" >> test-summary.md
          echo "### Artifacts Generated" >> test-summary.md
          find . -name "*.xml" -o -name "*.json" -o -name "*.html" | head -20 >> test-summary.md
          
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary-report
          path: test-summary.md
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 7: Deployment Gate (for production)
  deployment-gate:
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests, visual-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Check all tests passed
        run: |
          if [[ "${{ needs.unit-integration-tests.result }}" != "success" ]]; then
            echo "Unit/Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" != "success" ]]; then
            echo "E2E tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.visual-tests.result }}" != "success" ]]; then
            echo "Visual tests failed"
            exit 1
          fi
          
          echo "All critical tests passed - ready for deployment"
          
      - name: Create deployment tag
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "deploy-$(date +%Y%m%d-%H%M%S)" -m "Automated deployment tag"
          git push origin --tags